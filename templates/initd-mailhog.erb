#!/bin/sh
### BEGIN INIT INFO
# Provides:          mailhog
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Web and API based SMTP testing 
# Description:       Inspired by MailCatcher, easier to install.
#                    Built with Go - MailHog runs without installation on multiple platforms.
#                    MailHog is an email testing tool for developers
### END INIT INFO

# Author: Lionel Félicité <deogracia@free.fr>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=mailhog                   # Introduce a short description here
NAME="<%= @service_name %>"    # Introduce the short server's name here
CONF="<%= @config %>"          # Configuration file
DAEMON="<%= @binary_file %>"   # Introduce the server's location here
DAEMON_ARGS=""                 # Arguments to run the daemon with
RUNDIR="/var/run/mailhog"
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r $CONF ] && . $CONF

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
 mkdir -p $RUNDIR
 chmod 755 $RUNDIR
 chown $MAILHOG_USER:$MAILHOG_USER $RUNDIR
 daemon --name=$NAME --pidfile=$PIDFILE --user=$MAILHOG_USER --safe -- $DAEMON $DAEMON_ARGS $DAEMON_OPTS
}

#
# Function that stops the daemon/service
#
do_stop()
{
 if [ -f $PIDFILE ] && [ `ps aux |grep -v grep |grep $PIDFILE| wc -l` != 0 ]; then
   kill -15 `cat $PIDFILE`
   sleep 2
   [ `ps aux |grep -v grep |grep $PIDFILE| wc -l` != 0 ] && kill -9  `cat $PIDFILE`
   sleep 2 
   # Many daemons don't delete their pidfiles when they exit.
   rm -f $PIDFILE
 fi
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

: